// netlify/lib/types.mts
// Unified type definitions covering CacheEntry / Job / RateLimit, etc.

export type CacheDataEncoding = 'json' | 'text' | 'base64';

export interface CacheMeta {
  source_id: string;
  key: string; // normalized key (e.g., /weather/Shanghai)
  cached_at: string; // ISO time
  expires_at: string | null; // ISO time or null (no expiry)
  stale: boolean; // whether expired (server-side view)
  ttl_s: number; // TTL seconds (used for reset/extension)
  etag?: string | null;
  last_modified?: string | null;
  origin_status?: number | null;
  content_type?: string | null; // e.g. application/json, image/png
  data_encoding: CacheDataEncoding; // json | text | base64
}

export interface CacheEntry<TData = unknown> {
  data: TData | string | null; // JSON object, plain text, or base64-encoded
  meta: CacheMeta;
}

export type JobPriority = 'low' | 'normal' | 'high';

export interface RefreshJob {
  id?: string; // generated by the queue layer
  source_id: string;
  key: string; // normalized key
  priority?: JobPriority;
  attempts?: number; // number of attempts tried (for consumer retry limit control)
  enqueued_at?: string; // ISO time
}

export interface EnqueueResult {
  enqueued: boolean;
  jobId?: string;
  reason?: 'duplicate' | 'idempotent_reject' | 'invalid';
}

export interface RateLimitDecision {
  allowed: boolean;
  limit: number;
  remaining: number;
  reset_at: string; // ISO time
}
